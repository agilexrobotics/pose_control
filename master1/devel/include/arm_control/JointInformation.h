// Generated by gencpp from file arm_control/JointInformation.msg
// DO NOT EDIT!


#ifndef ARM_CONTROL_MESSAGE_JOINTINFORMATION_H
#define ARM_CONTROL_MESSAGE_JOINTINFORMATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_control
{
template <class ContainerAllocator>
struct JointInformation_
{
  typedef JointInformation_<ContainerAllocator> Type;

  JointInformation_()
    : joint_pos()
    , joint_vel()
    , joint_cur()
    , mode(0)  {
      joint_pos.assign(0.0);

      joint_vel.assign(0.0);

      joint_cur.assign(0.0);
  }
  JointInformation_(const ContainerAllocator& _alloc)
    : joint_pos()
    , joint_vel()
    , joint_cur()
    , mode(0)  {
  (void)_alloc;
      joint_pos.assign(0.0);

      joint_vel.assign(0.0);

      joint_cur.assign(0.0);
  }



   typedef boost::array<float, 7>  _joint_pos_type;
  _joint_pos_type joint_pos;

   typedef boost::array<float, 7>  _joint_vel_type;
  _joint_vel_type joint_vel;

   typedef boost::array<float, 7>  _joint_cur_type;
  _joint_cur_type joint_cur;

   typedef int32_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::arm_control::JointInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_control::JointInformation_<ContainerAllocator> const> ConstPtr;

}; // struct JointInformation_

typedef ::arm_control::JointInformation_<std::allocator<void> > JointInformation;

typedef boost::shared_ptr< ::arm_control::JointInformation > JointInformationPtr;
typedef boost::shared_ptr< ::arm_control::JointInformation const> JointInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_control::JointInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_control::JointInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_control::JointInformation_<ContainerAllocator1> & lhs, const ::arm_control::JointInformation_<ContainerAllocator2> & rhs)
{
  return lhs.joint_pos == rhs.joint_pos &&
    lhs.joint_vel == rhs.joint_vel &&
    lhs.joint_cur == rhs.joint_cur &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_control::JointInformation_<ContainerAllocator1> & lhs, const ::arm_control::JointInformation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_control::JointInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_control::JointInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::JointInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::JointInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::JointInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::JointInformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_control::JointInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86ad2a9a176a812901cac6f69b936f2e";
  }

  static const char* value(const ::arm_control::JointInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86ad2a9a176a8129ULL;
  static const uint64_t static_value2 = 0x01cac6f69b936f2eULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_control::JointInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_control/JointInformation";
  }

  static const char* value(const ::arm_control::JointInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_control::JointInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[7] joint_pos\n"
"float32[7] joint_vel\n"
"float32[7] joint_cur\n"
"int32 mode\n"
;
  }

  static const char* value(const ::arm_control::JointInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_control::JointInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_pos);
      stream.next(m.joint_vel);
      stream.next(m.joint_cur);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_control::JointInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_control::JointInformation_<ContainerAllocator>& v)
  {
    s << indent << "joint_pos[]" << std::endl;
    for (size_t i = 0; i < v.joint_pos.size(); ++i)
    {
      s << indent << "  joint_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_pos[i]);
    }
    s << indent << "joint_vel[]" << std::endl;
    for (size_t i = 0; i < v.joint_vel.size(); ++i)
    {
      s << indent << "  joint_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_vel[i]);
    }
    s << indent << "joint_cur[]" << std::endl;
    for (size_t i = 0; i < v.joint_cur.size(); ++i)
    {
      s << indent << "  joint_cur[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_cur[i]);
    }
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROL_MESSAGE_JOINTINFORMATION_H
