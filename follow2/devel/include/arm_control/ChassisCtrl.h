// Generated by gencpp from file arm_control/ChassisCtrl.msg
// DO NOT EDIT!


#ifndef ARM_CONTROL_MESSAGE_CHASSISCTRL_H
#define ARM_CONTROL_MESSAGE_CHASSISCTRL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_control
{
template <class ContainerAllocator>
struct ChassisCtrl_
{
  typedef ChassisCtrl_<ContainerAllocator> Type;

  ChassisCtrl_()
    : vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , mode1(0)
    , mode2(0)  {
    }
  ChassisCtrl_(const ContainerAllocator& _alloc)
    : vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , mode1(0)
    , mode2(0)  {
  (void)_alloc;
    }



   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _vz_type;
  _vz_type vz;

   typedef int32_t _mode1_type;
  _mode1_type mode1;

   typedef int32_t _mode2_type;
  _mode2_type mode2;





  typedef boost::shared_ptr< ::arm_control::ChassisCtrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_control::ChassisCtrl_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisCtrl_

typedef ::arm_control::ChassisCtrl_<std::allocator<void> > ChassisCtrl;

typedef boost::shared_ptr< ::arm_control::ChassisCtrl > ChassisCtrlPtr;
typedef boost::shared_ptr< ::arm_control::ChassisCtrl const> ChassisCtrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_control::ChassisCtrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_control::ChassisCtrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_control::ChassisCtrl_<ContainerAllocator1> & lhs, const ::arm_control::ChassisCtrl_<ContainerAllocator2> & rhs)
{
  return lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.mode1 == rhs.mode1 &&
    lhs.mode2 == rhs.mode2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_control::ChassisCtrl_<ContainerAllocator1> & lhs, const ::arm_control::ChassisCtrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_control::ChassisCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_control::ChassisCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::ChassisCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_control::ChassisCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::ChassisCtrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_control::ChassisCtrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_control::ChassisCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "488e9407ad3cab6f3db0659c324cb1ea";
  }

  static const char* value(const ::arm_control::ChassisCtrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x488e9407ad3cab6fULL;
  static const uint64_t static_value2 = 0x3db0659c324cb1eaULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_control::ChassisCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_control/ChassisCtrl";
  }

  static const char* value(const ::arm_control::ChassisCtrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_control::ChassisCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 vx\n"
"float64 vy\n"
"float64 vz\n"
"int32 mode1\n"
"int32 mode2\n"
;
  }

  static const char* value(const ::arm_control::ChassisCtrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_control::ChassisCtrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.mode1);
      stream.next(m.mode2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisCtrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_control::ChassisCtrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_control::ChassisCtrl_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<double>::stream(s, indent + "  ", v.vz);
    s << indent << "mode1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode1);
    s << indent << "mode2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROL_MESSAGE_CHASSISCTRL_H
